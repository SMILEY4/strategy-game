AWSTemplateFormatVersion: "2010-09-09"

Resources:

    #===================================================================================================================
    #    Swarm Configuration
    #===================================================================================================================

    SwarmConfigBucket:
        Type: "AWS::S3::Bucket"
        DeletionPolicy: "Delete"
        Properties:
            BucketName: "strategy-game.swarm"


    #===================================================================================================================
    #    Deployment Artifact Bucket
    #===================================================================================================================

    DeploymentArtifactBucket:
        Type: "AWS::S3::Bucket"
        DeletionPolicy: "Delete"
        Properties:
            BucketName: "strategy-game.backend-deploy-artifacts"


    #===================================================================================================================
    #    Security Groups
    #===================================================================================================================

    SwarmSecurityGroup:
        Type: "AWS::EC2::SecurityGroup"
        Properties:
            GroupName: "ec2-swarm"
            GroupDescription: "Security group for docker-swarm nodes allowing communication with other nodes and exposes ports 80,443 for application."
            SecurityGroupIngress:
                # ssh
                -   IpProtocol: tcp
                    FromPort: 22
                    ToPort: 22
                    CidrIp: 0.0.0.0/0
                # application
                -   IpProtocol: tcp
                    FromPort: 80
                    ToPort: 80
                    CidrIp: 0.0.0.0/0
                -   IpProtocol: tcp
                    FromPort: 443
                    ToPort: 443
                    CidrIp: 0.0.0.0/0

    SwarmSGIngressManagerCommunication:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: SwarmSecurityGroup
        Properties:
            GroupId: !GetAtt SwarmSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 2377
            ToPort: 2377
            SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId

    SwarmSGIngressDiscoveryTCP:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: SwarmSecurityGroup
        Properties:
            GroupId: !GetAtt SwarmSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 7946
            ToPort: 7946
            SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId

    SwarmSGIngressDiscoveryUDP:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: SwarmSecurityGroup
        Properties:
            GroupId: !GetAtt SwarmSecurityGroup.GroupId
            IpProtocol: udp
            FromPort: 7946
            ToPort: 7946
            SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId


    SwarmSGIngressTrafficTCP:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: SwarmSecurityGroup
        Properties:
            GroupId: !GetAtt SwarmSecurityGroup.GroupId
            IpProtocol: tcp
            FromPort: 4789
            ToPort: 4789
            SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId

    SwarmSGIngressTrafficUDP:
        Type: "AWS::EC2::SecurityGroupIngress"
        DependsOn: SwarmSecurityGroup
        Properties:
            GroupId: !GetAtt SwarmSecurityGroup.GroupId
            IpProtocol: udp
            FromPort: 4789
            ToPort: 4789
            SourceSecurityGroupId: !GetAtt SwarmSecurityGroup.GroupId


    #===================================================================================================================
    #    Master
    #===================================================================================================================

    MasterInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: "ec2-swarm-master"
            Path: "/"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"
                - "arn:aws:iam::aws:policy/AmazonS3ReadOnlyAccess"
                - "arn:aws:iam::aws:policy/AmazonSSMReadOnlyAccess"


    MasterInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            InstanceProfileName: "ec2-swarm-master"
            Path: "/"
            Roles:
                - !Ref MasterInstanceRole


    #===================================================================================================================
    #    Worker
    #===================================================================================================================

    WorkerInstanceRole:
        Type: "AWS::IAM::Role"
        Properties:
            RoleName: "ec2-swarm-worker"
            Path: "/"
            AssumeRolePolicyDocument:
                Version: "2012-10-17"
                Statement:
                    -   Effect: "Allow"
                        Principal:
                            Service:
                                - "ec2.amazonaws.com"
                        Action:
                            - "sts:AssumeRole"
            ManagedPolicyArns:
                - "arn:aws:iam::aws:policy/AmazonSSMManagedInstanceCore"
                - "arn:aws:iam::aws:policy/AmazonEC2ContainerRegistryFullAccess"

    WorkerInstanceProfile:
        Type: "AWS::IAM::InstanceProfile"
        Properties:
            InstanceProfileName: "ec2-swarm-worker"
            Path: "/"
            Roles:
                - !Ref WorkerInstanceRole

Outputs:
    SwarmSecurityGroup:
        Description: "The security-group of the master and worker ec2-instances."
        Value: !Ref SwarmSecurityGroup
    MasterInstanceProfile:
        Description: "The instance-profile of the master ec2-instance."
        Value: !Ref MasterInstanceProfile
    WorkerInstanceProfile:
        Description: "The instance-profile of the worker ec2-instance."
        Value: !Ref WorkerInstanceProfile